<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jrbeverly</title><link>/tags/jrbeverly/</link><description>Recent content on jrbeverly</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 19 May 2022 00:58:15 +0000</lastBuildDate><atom:link href="/tags/jrbeverly/index.xml" rel="self" type="application/rss+xml"/><item><title>swagger-golang-bazelgen-exp</title><link>/2022/05/jrbeverly-swagger-golang-bazelgen-exp/</link><pubDate>Thu, 19 May 2022 00:58:15 +0000</pubDate><guid>/2022/05/jrbeverly-swagger-golang-bazelgen-exp/</guid><description>Fiddling with an idea of generating models from the OpenAPI spec for YAML.</description></item><item><title>graphql-golang-note-check</title><link>/2022/05/jrbeverly-graphql-golang-note-check/</link><pubDate>Wed, 18 May 2022 23:21:25 +0000</pubDate><guid>/2022/05/jrbeverly-graphql-golang-note-check/</guid><description>Experimenting a bit with gqlgen for generating GraphQL code from spec.</description></item><item><title>react-xstate-machines</title><link>/2022/05/jrbeverly-react-xstate-machines/</link><pubDate>Wed, 18 May 2022 23:14:27 +0000</pubDate><guid>/2022/05/jrbeverly-react-xstate-machines/</guid><description>Running through the workshop example of &lt;a href="https://daveceddia.com/react-confirmation-modal-state-machine/">Build A Confirmation Modal in React with State Machines&lt;/a></description></item><item><title>exp-pulumi-lambda</title><link>/2022/05/jrbeverly-exp-pulumi-lambda/</link><pubDate>Wed, 18 May 2022 00:40:54 +0000</pubDate><guid>/2022/05/jrbeverly-exp-pulumi-lambda/</guid><description>Experimenting with the pulumi examples from &lt;a href="https://github.com/pulumi/examples,">https://github.com/pulumi/examples,&lt;/a> and the options to have</description></item><item><title>golang-gin-gitpod</title><link>/2022/05/jrbeverly-golang-gin-gitpod/</link><pubDate>Wed, 18 May 2022 00:23:29 +0000</pubDate><guid>/2022/05/jrbeverly-golang-gin-gitpod/</guid><description>Fiddling with the Dev experience of Golang gin within Gitpod Based on &lt;a href="https://github.com/gitpod-io/go-gin-app">gitpod-io/go-gin-app&lt;/a></description></item><item><title>reminders-miragejs</title><link>/2022/05/jrbeverly-reminders-miragejs/</link><pubDate>Wed, 18 May 2022 00:07:08 +0000</pubDate><guid>/2022/05/jrbeverly-reminders-miragejs/</guid><description>Running through the (MirageJS Tutorial)[https://github.com/miragejs/tutorial] case</description></item><item><title>manim-exp-video-generation</title><link>/2022/05/jrbeverly-manim-exp-video-generation/</link><pubDate>Tue, 17 May 2022 02:10:19 +0000</pubDate><guid>/2022/05/jrbeverly-manim-exp-video-generation/</guid><description>Experimenting with the MAnim library for generating video animations.</description></item><item><title>react-wasm-babel</title><link>/2022/05/jrbeverly-react-wasm-babel/</link><pubDate>Tue, 17 May 2022 02:05:18 +0000</pubDate><guid>/2022/05/jrbeverly-react-wasm-babel/</guid><description>Fiddling around with an opinionated example for Webpack builds with WebAssembly. Source code for fractal is based on &lt;a href="https://dev.to/brightdevs/using-webassembly-with-react-1led,">https://dev.to/brightdevs/using-webassembly-with-react-1led,&lt;/a> and the repository templated by &lt;a href="https://github.com/Fallenstedt/wasm-react-webpack-template">https://github.com/Fallenstedt/wasm-react-webpack-template&lt;/a>.</description></item><item><title>vuln-disclosure-policy</title><link>/2022/05/jrbeverly-vuln-disclosure-policy/</link><pubDate>Fri, 13 May 2022 03:25:29 +0000</pubDate><guid>/2022/05/jrbeverly-vuln-disclosure-policy/</guid><description>Exploring leveraging &lt;a href="https://github.com/disclose/dioterms">dioterms&lt;/a> and &lt;a href="https://policymaker.disclose.io/policymaker">policymaker&lt;/a> for creating vulnerability disclore policies for a website.</description></item><item><title>bazel-terraform-conftest-experiments</title><link>/2022/05/jrbeverly-bazel-terraform-conftest-experiments/</link><pubDate>Wed, 11 May 2022 02:21:49 +0000</pubDate><guid>/2022/05/jrbeverly-bazel-terraform-conftest-experiments/</guid><description>Experimenting with using Bazel to handle the build &amp;amp; execution of Terraform files, while providing means of writing tests against the terraform with conftest. Fiddling with the idea of having local tests against the configuration, as well as tests against the terraform plan. The intention is that Bazel would be responsible for constructing Terraform deployable tarballs, which contains all resolved modules &amp;amp; providers. These would be executed to perform &lt;code>apply&lt;/code>, &lt;code>plan&lt;/code> and other commands.</description></item><item><title>julia-with-jupyter-notebook</title><link>/2022/04/jrbeverly-julia-with-jupyter-notebook/</link><pubDate>Thu, 07 Apr 2022 03:14:33 +0000</pubDate><guid>/2022/04/jrbeverly-julia-with-jupyter-notebook/</guid><description>Experiments with working with Julia &amp;amp; Jupyter Notebooks.</description></item><item><title>gitpod-jupyter-notebook</title><link>/2022/03/jrbeverly-gitpod-jupyter-notebook/</link><pubDate>Thu, 17 Mar 2022 23:41:20 +0000</pubDate><guid>/2022/03/jrbeverly-gitpod-jupyter-notebook/</guid><description>Validating working with Jupyter notebooks in a GitPod environments</description></item><item><title>pushgateway-compose-setup</title><link>/2022/03/jrbeverly-pushgateway-compose-setup/</link><pubDate>Tue, 15 Mar 2022 22:33:21 +0000</pubDate><guid>/2022/03/jrbeverly-pushgateway-compose-setup/</guid><description>Simple code setup for spinning up Pushgateway, Prometheus &amp;amp; Grafana for validating lifecycle pushgateway metrrics.</description></item><item><title>aws-exp-organizations-policy</title><link>/2022/03/jrbeverly-aws-exp-organizations-policy/</link><pubDate>Sun, 06 Mar 2022 21:32:19 +0000</pubDate><guid>/2022/03/jrbeverly-aws-exp-organizations-policy/</guid><description>Experiments with AWS Organization structure and potential SCP policies.</description></item><item><title>github-pullthrough-mirror</title><link>/2022/03/jrbeverly-github-pullthrough-mirror/</link><pubDate>Fri, 04 Mar 2022 04:32:17 +0000</pubDate><guid>/2022/03/jrbeverly-github-pullthrough-mirror/</guid><description>Lightweight experiment for mirroring GitHub releases into a file store system like Minio or AWS S3.</description></item><item><title>github-config-in-code</title><link>/2022/03/jrbeverly-github-config-in-code/</link><pubDate>Wed, 02 Mar 2022 02:14:31 +0000</pubDate><guid>/2022/03/jrbeverly-github-config-in-code/</guid><description>Fiddling with the configuration options available for GitHub, while encoding the properties in the &lt;code>.github&lt;/code> directory.</description></item><item><title>github-app-for-code-change</title><link>/2022/02/jrbeverly-github-app-for-code-change/</link><pubDate>Wed, 23 Feb 2022 00:11:59 +0000</pubDate><guid>/2022/02/jrbeverly-github-app-for-code-change/</guid><description>Running through a bunch of things to be done with this</description></item><item><title>gpg-artifact-sign-exp</title><link>/2022/01/jrbeverly-gpg-artifact-sign-exp/</link><pubDate>Thu, 27 Jan 2022 02:07:13 +0000</pubDate><guid>/2022/01/jrbeverly-gpg-artifact-sign-exp/</guid><description>Minor experiment with a shell script for signing artifacts that would be generated from a build process.</description></item><item><title>bevy-rustlang-example-window</title><link>/2022/01/jrbeverly-bevy-rustlang-example-window/</link><pubDate>Thu, 27 Jan 2022 02:02:45 +0000</pubDate><guid>/2022/01/jrbeverly-bevy-rustlang-example-window/</guid><description>Fiddling with one of the Bevy examples for provisioning a window with Bevy.</description></item><item><title>exp-webassembly-golang-bazel</title><link>/2022/01/jrbeverly-exp-webassembly-golang-bazel/</link><pubDate>Thu, 27 Jan 2022 00:52:56 +0000</pubDate><guid>/2022/01/jrbeverly-exp-webassembly-golang-bazel/</guid><description>Experimenting with some issues encountering with WebAssembly, Golang &amp;amp; Bazel</description></item><item><title>packer-overwrite-motd</title><link>/2022/01/jrbeverly-packer-overwrite-motd/</link><pubDate>Thu, 27 Jan 2022 00:27:16 +0000</pubDate><guid>/2022/01/jrbeverly-packer-overwrite-motd/</guid><description>Overwriting the MOTD of pre-baked AMIs using Packer</description></item><item><title>cobra-cmd-with-docs</title><link>/2022/01/jrbeverly-cobra-cmd-with-docs/</link><pubDate>Wed, 26 Jan 2022 04:11:54 +0000</pubDate><guid>/2022/01/jrbeverly-cobra-cmd-with-docs/</guid><description>Experiment with the GenMarkdownTree method available with cobrago.</description></item><item><title>xterm-for-cmd-as-site</title><link>/2022/01/jrbeverly-xterm-for-cmd-as-site/</link><pubDate>Wed, 26 Jan 2022 04:07:04 +0000</pubDate><guid>/2022/01/jrbeverly-xterm-for-cmd-as-site/</guid><description>Experimenting with the idea of a minimum environment for running terminal applications in browser. In essence, allowing a user to navigate to &lt;code>example.com/terminal&lt;/code> to view a terminal version of the sites API. With the appropriate token &amp;amp; other bits provided from the browser session tokens.</description></item><item><title>aws-assumerole-with-cert</title><link>/2022/01/jrbeverly-aws-assumerole-with-cert/</link><pubDate>Wed, 26 Jan 2022 03:27:23 +0000</pubDate><guid>/2022/01/jrbeverly-aws-assumerole-with-cert/</guid><description>Exploring the concept of using AWS IoT Certificates for authenticating with AWS. This came up while working with minio, which supports authentication with certificates: &amp;gt; MinIO provides a custom STS API that allows authentication with client X.509 / TLS certificates.</description></item><item><title>cloudfront-cognito-private-auth</title><link>/2022/01/jrbeverly-cloudfront-cognito-private-auth/</link><pubDate>Wed, 26 Jan 2022 02:50:02 +0000</pubDate><guid>/2022/01/jrbeverly-cloudfront-cognito-private-auth/</guid><description>Fiddling with AWS S3 Websites leveraging AWS Cognito for authentication Terraform is based on the tutorial &lt;a href="https://transcend.io/blog/restrict-access-to-internal-websites-with-beyondcorp/">https://transcend.io/blog/restrict-access-to-internal-websites-with-beyondcorp/&lt;/a> and the public repository: &lt;a href="https://github.com/transcend-io/beyondcorp-cloudfront">https://github.com/transcend-io/beyondcorp-cloudfront&lt;/a></description></item><item><title>dapper-with-entity-model</title><link>/2021/10/jrbeverly-dapper-with-entity-model/</link><pubDate>Sat, 23 Oct 2021 14:43:17 +0000</pubDate><guid>/2021/10/jrbeverly-dapper-with-entity-model/</guid><description>Exported case of experimenting with using Postgres Functions, Dapper &amp;amp; Entity.Model.</description></item><item><title>cue-for-schema-gen</title><link>/2021/10/jrbeverly-cue-for-schema-gen/</link><pubDate>Sat, 23 Oct 2021 00:46:21 +0000</pubDate><guid>/2021/10/jrbeverly-cue-for-schema-gen/</guid><description>Experimenting with using Cuelang for the purposes of representing a schema, then generating associated files from the original source of truth</description></item><item><title>bazel-bash-packaged</title><link>/2021/10/jrbeverly-bazel-bash-packaged/</link><pubDate>Tue, 05 Oct 2021 23:00:41 +0000</pubDate><guid>/2021/10/jrbeverly-bazel-bash-packaged/</guid><description>Experimenting with using Bazel &amp;amp; Bats in container images for writing up tests for shell scripts.</description></item><item><title>jcompiler</title><link>/2021/10/jrbeverly-jcompiler/</link><pubDate>Mon, 04 Oct 2021 23:31:06 +0000</pubDate><guid>/2021/10/jrbeverly-jcompiler/</guid><description>A Joos programming language compiler, written in Java. JCompiler Summary A Joos programming language compiler, written in Java.
Getting Started The project is currently not maintained or kept in runnable order. You may be able to open the project in Eclipse, but at this time the code is only here as readonly.
Notes The application was written as part of the UWaterloo CS444 Compiler Course.</description></item><item><title>bazel-toolchain-from-s3</title><link>/2021/09/jrbeverly-bazel-toolchain-from-s3/</link><pubDate>Sun, 26 Sep 2021 23:53:42 +0000</pubDate><guid>/2021/09/jrbeverly-bazel-toolchain-from-s3/</guid><description>Experimenting with setting up Bazek toolchains, when the tools are mirrored into an AWS S3 bucket. This builds off previous work done in jrbeverly/bazel-external-toolchain-rule for creating toolchains from files.</description></item><item><title>bazel-external-toolchain-rules</title><link>/2021/09/jrbeverly-bazel-external-toolchain-rules/</link><pubDate>Sun, 26 Sep 2021 22:20:07 +0000</pubDate><guid>/2021/09/jrbeverly-bazel-external-toolchain-rules/</guid><description>Experimenting with setting up Bazel toolchains using an externally managed &lt;code>.toolchain&lt;/code> file, that is responsible for defining properties such as: - System compatibility - Integrity Checks - Tool retrieval locations</description></item><item><title>bazel-jsonnett-templates</title><link>/2021/09/jrbeverly-bazel-jsonnett-templates/</link><pubDate>Sun, 12 Sep 2021 17:15:18 +0000</pubDate><guid>/2021/09/jrbeverly-bazel-jsonnett-templates/</guid><description>Generating files from base configuration files using Jsonnet.</description></item><item><title>internal-reserved-license-repo</title><link>/2021/09/jrbeverly-internal-reserved-license-repo/</link><pubDate>Sat, 11 Sep 2021 19:18:11 +0000</pubDate><guid>/2021/09/jrbeverly-internal-reserved-license-repo/</guid><description>Experimenting with laying out the licensing stamp for a closed/internal source repository</description></item><item><title>github-actions-dbx-upload</title><link>/2021/08/jrbeverly-github-actions-dbx-upload/</link><pubDate>Sat, 28 Aug 2021 22:26:52 +0000</pubDate><guid>/2021/08/jrbeverly-github-actions-dbx-upload/</guid><description>Publishing to Dropbox programmatically from GitHub Actions with the intentions to mirror the model of AWS S3 publishing.</description></item><item><title>terraform-aws-codepipeline-terraform-runner</title><link>/2021/08/jrbeverly-terraform-aws-codepipeline-terraform-runner/</link><pubDate>Sat, 28 Aug 2021 14:39:46 +0000</pubDate><guid>/2021/08/jrbeverly-terraform-aws-codepipeline-terraform-runner/</guid><description>Terraform executor leveraging the CodePipeline functionality in AWS, for a fully serverless model of executing terraform in AWS.</description></item><item><title>golang-analyzer-inline-bazel</title><link>/2021/08/jrbeverly-golang-analyzer-inline-bazel/</link><pubDate>Wed, 18 Aug 2021 01:16:50 +0000</pubDate><guid>/2021/08/jrbeverly-golang-analyzer-inline-bazel/</guid><description>Experimenting with having analyzers locally defined to a repository, rather than externally defined.</description></item><item><title>github-app-golang</title><link>/2021/07/jrbeverly-github-app-golang/</link><pubDate>Fri, 16 Jul 2021 16:57:05 +0000</pubDate><guid>/2021/07/jrbeverly-github-app-golang/</guid><description>GitHub App written in Golang with the AWS &amp;amp; GitHub integrations split away, to try and encode the core &amp;lsquo;concepts&amp;rsquo; solely into the lib/ component</description></item><item><title>k3s-at-home-poc</title><link>/2021/07/jrbeverly-k3s-at-home-poc/</link><pubDate>Mon, 12 Jul 2021 20:40:29 +0000</pubDate><guid>/2021/07/jrbeverly-k3s-at-home-poc/</guid><description>Determining how viable it would to be switch from using docker-compose to using K3s to run my internal homelab environment.</description></item><item><title>gitpod-cobra-golang</title><link>/2021/07/jrbeverly-gitpod-cobra-golang/</link><pubDate>Mon, 12 Jul 2021 19:10:27 +0000</pubDate><guid>/2021/07/jrbeverly-gitpod-cobra-golang/</guid><description>Leveraging GitPod for prototyping out a golang cli that interfaces with AWS.</description></item><item><title>rust-lang-checks</title><link>/2021/07/jrbeverly-rust-lang-checks/</link><pubDate>Mon, 12 Jul 2021 15:05:14 +0000</pubDate><guid>/2021/07/jrbeverly-rust-lang-checks/</guid><description>Experimenting with aspects of Rustlang for working with database, and immutable data structures.</description></item><item><title>packer-bake-with-aws-native</title><link>/2021/05/jrbeverly-packer-bake-with-aws-native/</link><pubDate>Sat, 01 May 2021 01:10:12 +0000</pubDate><guid>/2021/05/jrbeverly-packer-bake-with-aws-native/</guid><description>Creating pre-baked AMIs using Packer within AWS Native resources (Codepipeline / CodeBuild).</description></item><item><title>bazel-and-aws-cdk</title><link>/2021/04/jrbeverly-bazel-and-aws-cdk/</link><pubDate>Tue, 27 Apr 2021 23:00:39 +0000</pubDate><guid>/2021/04/jrbeverly-bazel-and-aws-cdk/</guid><description>Prototyping ideas with using Bazel and AWS Cloud Development Kit to create cloudformation templates</description></item><item><title>repository-template-file-invoke-prototype</title><link>/2021/03/jrbeverly-repository-template-file-invoke-prototype/</link><pubDate>Thu, 25 Mar 2021 21:47:15 +0000</pubDate><guid>/2021/03/jrbeverly-repository-template-file-invoke-prototype/</guid><description>Experimenting with a model of building a lightweight cron+bash system for performing templating&amp;amp;file modification to multiple repositories.</description></item><item><title>dotfiles</title><link>/2021/03/jrbeverly-dotfiles/</link><pubDate>Sun, 21 Mar 2021 02:26:13 +0000</pubDate><guid>/2021/03/jrbeverly-dotfiles/</guid><description>A set of vim, zsh, git, and configuration files.</description></item><item><title>ml-learning-lab</title><link>/2021/03/jrbeverly-ml-learning-lab/</link><pubDate>Tue, 16 Mar 2021 02:03:08 +0000</pubDate><guid>/2021/03/jrbeverly-ml-learning-lab/</guid><description>A repository for aggregating my machine learning exercises, practices and learning labs. The projects included in this repository are based on the coursework for Udacity&amp;rsquo;s Deep Learning Nanodegree Foundations. These are primarily from working on the Machine Learning Nanodegree offered by Udacity. The project files are built using Jupyter Book into a web-accessible form.</description></item><item><title>codespace</title><link>/2021/03/jrbeverly-codespace/</link><pubDate>Mon, 08 Mar 2021 01:03:04 +0000</pubDate><guid>/2021/03/jrbeverly-codespace/</guid><description>Prebuilt, development environment in the browser – powered by VS Code. This image acts as a catch-all image for doing full-stack development in a polyglot type environment. The running container makes use of the host docker service to allow for docker builds.</description></item><item><title>home</title><link>/2020/11/jrbeverly-home/</link><pubDate>Sat, 28 Nov 2020 02:46:39 +0000</pubDate><guid>/2020/11/jrbeverly-home/</guid><description>Ansible playbooks for configuring services running within my internal home cloud.</description></item><item><title>aws-lightsail-codespaces</title><link>/2020/08/jrbeverly-aws-lightsail-codespaces/</link><pubDate>Thu, 20 Aug 2020 22:21:48 +0000</pubDate><guid>/2020/08/jrbeverly-aws-lightsail-codespaces/</guid><description>Run VS Code on an AWS Lightsail instance with auto-generated password and static IP. Early experiments with cloud-driven development environments configured on-demand using terraform. Initial exploratory work for seeing what changes exist in the workflows, and any issues that may arise as a result of working in Lightsail.</description></item><item><title>aws-lambda-simple-service</title><link>/2020/08/jrbeverly-aws-lambda-simple-service/</link><pubDate>Wed, 19 Aug 2020 23:16:36 +0000</pubDate><guid>/2020/08/jrbeverly-aws-lambda-simple-service/</guid><description>A simple Express application built with the intent to test an Express server running in different environments (local, docker, lambda).</description></item><item><title>jrbeverly.web</title><link>/2020/06/jrbeverly-jrbeverly.web/</link><pubDate>Sat, 27 Jun 2020 21:01:56 +0000</pubDate><guid>/2020/06/jrbeverly-jrbeverly.web/</guid><description>Represents the infrastructure resources of &amp;lsquo;jrbeverly&amp;rsquo;, keeping track of infrastructure components, assets and other resources that are needed for components.</description></item><item><title>boston-housing</title><link>/2020/02/jrbeverly-boston-housing/</link><pubDate>Mon, 24 Feb 2020 17:50:55 +0000</pubDate><guid>/2020/02/jrbeverly-boston-housing/</guid><description>Evaluate the performance and predictive power of a model that has been trained and tested on data collected from homes in suburbs of Boston, Massachusetts. A model trained on this data that is seen as a good fit could then be used to make certain predictions about a home — in particular, its monetary value. This model would prove to be invaluable for someone like a real estate agent who could make use of such information on a daily basis.</description></item><item><title>charityml</title><link>/2020/02/jrbeverly-charityml/</link><pubDate>Mon, 24 Feb 2020 17:50:35 +0000</pubDate><guid>/2020/02/jrbeverly-charityml/</guid><description>Employ several supervised algorithms to accurately model individuals' income using data collected from the 1994 U.S. Census. From the best candidate algorithm from preliminary results and further optimize this algorithm to best model the data. Construct a model that accurately predicts whether an individual makes more than $50,000. This sort of task can arise in a non-profit setting, where organizations survive on donations. Understanding an individual&amp;rsquo;s income can help a non-profit better understand how large of a donation to request, or whether or not they should reach out to begin with. While it can be difficult to determine an individual&amp;rsquo;s general income bracket directly from public sources, we can (as we will see) infer this value from other publically available features.</description></item><item><title>customer-segments</title><link>/2020/02/jrbeverly-customer-segments/</link><pubDate>Mon, 24 Feb 2020 17:48:47 +0000</pubDate><guid>/2020/02/jrbeverly-customer-segments/</guid><description>Analyze a dataset containing data on various customers' annual spending amounts (reported in monetary units) of diverse product categories for internal structure. One goal of this project is to best describe the variation in the different types of customers that a wholesale distributor interacts with. Doing so would equip the distributor with insight into how to best structure their delivery service to meet the needs of each customer.</description></item><item><title>dog-project</title><link>/2020/01/jrbeverly-dog-project/</link><pubDate>Sat, 11 Jan 2020 18:05:28 +0000</pubDate><guid>/2020/01/jrbeverly-dog-project/</guid><description>My implementation of the Convolutional Neural Networks (CNN) algorithm for identifying a canine’s breed from an image. Additionally, it supply the resembled dog breed if provided an image of a human.</description></item><item><title>quadcopter</title><link>/2020/01/jrbeverly-quadcopter/</link><pubDate>Fri, 10 Jan 2020 02:31:05 +0000</pubDate><guid>/2020/01/jrbeverly-quadcopter/</guid><description>My implementation of the DDPG reinforcement learning algorithm to solve the problem of a quadcopter taking flight. I have included a reference to the DDPG paper used in the development of the flying agent: &amp;gt; Continuous control with deep reinforcement learning &amp;gt; Timothy P. Lillicrap, Jonathan J. Hunt, Alexander Pritzel, Nicolas Heess, Tom Erez, Yuval Tassa, David Silver, Daan Wierstra &amp;gt; &amp;gt; We adapt the ideas underlying the success of Deep Q-Learning to the continuous action domain. We present an actor-critic, model-free algorithm based on the deterministic policy gradient that can operate over continuous action spaces. Using the same learning algorithm, network architecture and hyper-parameters, our algorithm robustly solves more than 20 simulated physics tasks, including classic problems such as cartpole swing-up, dexterous manipulation, legged locomotion and car driving. Our algorithm is able to find policies whose performance is competitive with those found by a planning algorithm with full access to the dynamics of the domain and its derivatives. We further demonstrate that for many of the tasks the algorithm can learn policies end-to-end: directly from raw pixel inputs.</description></item><item><title>bmx</title><link>/2020/01/jrbeverly-bmx/</link><pubDate>Wed, 08 Jan 2020 18:15:28 +0000</pubDate><guid>/2020/01/jrbeverly-bmx/</guid><description>BMX grants you API access to your AWS accounts, based on Okta credentials that you already own. It uses your Okta identity to create short-term AWS STS tokens, as an alternative to long-term IAM access keys. BMX manages your STS tokens with the following commands: 1. &lt;code>bmx print&lt;/code> writes your short-term tokens to &lt;code>stdout&lt;/code> as AWS environment variables. You can execute &lt;code>bmx print&lt;/code>&amp;rsquo;s output to make the environment variables available to your shell. 1. &lt;code>bmx write&lt;/code> writes your short-term tokens to &lt;code>~/.aws/credentials&lt;/code>. BMX prints detailed usage information when you run &lt;code>bmx -h&lt;/code> or &lt;code>bmx &amp;lt;cmd&amp;gt; -h&lt;/code>. BMX was developed by D2L (&lt;a href="https://github.com/Brightspace/bmx/">Brightspace/bmx&lt;/a>), and modifications have been made to the project by Arctic Wolf.</description></item><item><title>git-timeline</title><link>/2020/01/jrbeverly-git-timeline/</link><pubDate>Sat, 04 Jan 2020 01:26:48 +0000</pubDate><guid>/2020/01/jrbeverly-git-timeline/</guid><description>Allows bulk modification of the commit dates of a repository, changing the history of a repository.</description></item><item><title>aws-lambda-remote-session</title><link>/2020/01/jrbeverly-aws-lambda-remote-session/</link><pubDate>Fri, 03 Jan 2020 22:26:00 +0000</pubDate><guid>/2020/01/jrbeverly-aws-lambda-remote-session/</guid><description>A simple Lambda function written in PowerShell to validate if &lt;code>New-PSSession&lt;/code> can be leveraged from an AWS Lambda.</description></item><item><title>aws-chat-app</title><link>/2019/12/jrbeverly-aws-chat-app/</link><pubDate>Mon, 30 Dec 2019 23:57:22 +0000</pubDate><guid>/2019/12/jrbeverly-aws-chat-app/</guid><description>SAM Application for a simple chat application based on API Gateways new WebSocket API feature. This was originally developed as an experiment to see how viable running a chat-bot in a fully serverless environment, as opposed to just running on a container in ECS. This repository is based on &lt;a href="https://aws.amazon.com/blogs/compute/announcing-websocket-apis-in-amazon-api-gateway/">Announcing WebSocket APIs in Amazon API Gateway&lt;/a>, with the cloudformation and lambdas from &lt;a href="https://github.com/aws-samples/simple-websockets-chat-app">simple-websockets-chat-app&lt;/a>.</description></item><item><title>hubot-in-aws</title><link>/2019/12/jrbeverly-hubot-in-aws/</link><pubDate>Sat, 28 Dec 2019 15:56:31 +0000</pubDate><guid>/2019/12/jrbeverly-hubot-in-aws/</guid><description>Hubot deployment in AWS using AWS ECS Fargate. This was prototyped out while I was evaluating ChatOps strategies that could be used to wrap existing web interfaces or require minimal overhead.</description></item><item><title>pwsh-from-github</title><link>/2019/11/jrbeverly-pwsh-from-github/</link><pubDate>Sun, 17 Nov 2019 15:13:06 +0000</pubDate><guid>/2019/11/jrbeverly-pwsh-from-github/</guid><description>A powershell library that is installed from GitHub, rather than from Powershellgallery.</description></item><item><title>proposals-concept</title><link>/2019/10/jrbeverly-proposals-concept/</link><pubDate>Wed, 30 Oct 2019 03:40:50 +0000</pubDate><guid>/2019/10/jrbeverly-proposals-concept/</guid><description>Experimenting with the underlying infrastructure for a GitHub based proposals mechanisms that deploys to a web resource (website/subpage/etc)</description></item><item><title>exp-circleci-orbs</title><link>/2019/10/jrbeverly-exp-circleci-orbs/</link><pubDate>Wed, 30 Oct 2019 02:21:11 +0000</pubDate><guid>/2019/10/jrbeverly-exp-circleci-orbs/</guid><description>Experimenting with CircleCI Orbs for reducing code re-use in templates</description></item><item><title>bazel-csharp-testcases</title><link>/2019/10/jrbeverly-bazel-csharp-testcases/</link><pubDate>Sat, 26 Oct 2019 21:27:51 +0000</pubDate><guid>/2019/10/jrbeverly-bazel-csharp-testcases/</guid><description>This repository provides a set of usages for the bazel csharp rules. The idea behind these examples is to cover edge cases that are encountered during development, and provide a comprehensive test (&amp;amp; prototype) suite. While working on the bazel csharp rules, I have encountered bugs or small quirks that I would like to encode records of. Some of these are very minor details, so I felt it would work best to have them as an external repository. I defined the idea behind each program &lt;a href="docs/criteria.md">here&lt;/a>.</description></item><item><title>viewdocs-autodoc</title><link>/2019/10/jrbeverly-viewdocs-autodoc/</link><pubDate>Sat, 05 Oct 2019 20:47:31 +0000</pubDate><guid>/2019/10/jrbeverly-viewdocs-autodoc/</guid><description>&lt;p>This was an early concept I was working with for converting metadata files (json/yml) into standard README markdown files using simple bash and templates. Ultimately I did not go in this direction, as I found that I was not making the best use of the customization yielded from using with bash + templates. A simple templating engine provided all the basics that I was ultimately after.&lt;/p>
&lt;p>Below I have described some of the template concepts I was exploring at the time:&lt;/p></description></item><item><title>awesome-terraform-prototype</title><link>/2019/10/jrbeverly-awesome-terraform-prototype/</link><pubDate>Sat, 05 Oct 2019 20:41:57 +0000</pubDate><guid>/2019/10/jrbeverly-awesome-terraform-prototype/</guid><description>An experiment using &lt;code>mkdocs&lt;/code> and a series of json/yml files to define an awesome list. The markdown files are automatically generated from the yml files that define each element of the list (tags/metadata/etc). These files are then piped into &lt;code>mkdocs&lt;/code>, which yields a material theme website for the project.</description></item><item><title>exp-svg-icon-processing</title><link>/2019/10/jrbeverly-exp-svg-icon-processing/</link><pubDate>Sat, 05 Oct 2019 20:37:56 +0000</pubDate><guid>/2019/10/jrbeverly-exp-svg-icon-processing/</guid><description>Experiment with programmatically generating color variants for SVG files using a JSON definition file with the source SVG.</description></item><item><title>bullseye-exp</title><link>/2019/10/jrbeverly-bullseye-exp/</link><pubDate>Sat, 05 Oct 2019 20:35:47 +0000</pubDate><guid>/2019/10/jrbeverly-bullseye-exp/</guid><description>Experiment with BullsEye for building command-driven tooling (build-systems).</description></item><item><title>lab-starter</title><link>/2019/09/jrbeverly-lab-starter/</link><pubDate>Sun, 01 Sep 2019 20:31:22 +0000</pubDate><guid>/2019/09/jrbeverly-lab-starter/</guid><description>Noticed this when working with GitHub Actions that you can have a automated &amp;lsquo;teacher&amp;rsquo; by using linting + GitHub Bot. Thought this was an interesting idea, and have started this repository to get a better understanding of how this actually works. With GitHub now having its own CI/CD Pipeline, it may be possible to create all sorts of tutorials for setting up applications. The first one that comes to mind is gamedev with something like Godot. Since a written tutorial is more static, this would allow a learner to follow a structure process for writing their own game, while having step by step linting to ensure that nothing went off the guard-rails. Potential concern would be how the linting would handle a learner that introduced unexpected aspects to the code itself. For example, if the code is testing the output from the program, what if something like &lt;code>Console.WriteLine(&amp;quot;mydebuggingcode&amp;quot;)&lt;/code> is present, would that be a failure? How should that best be handled? Etc.</description></item><item><title>hello-github-actions</title><link>/2019/09/jrbeverly-hello-github-actions/</link><pubDate>Sun, 01 Sep 2019 19:56:26 +0000</pubDate><guid>/2019/09/jrbeverly-hello-github-actions/</guid><description>This course will walk you through writing your first action and using it with a workflow file. &lt;strong>Ready to get started? Navigate to the first issue.&lt;/strong></description></item><item><title>dotnet-native-corert</title><link>/2019/02/jrbeverly-dotnet-native-corert/</link><pubDate>Sun, 03 Feb 2019 03:52:04 +0000</pubDate><guid>/2019/02/jrbeverly-dotnet-native-corert/</guid><description>A simple CI/CD pipeline making use of CoreRT to build linux and windows copies of a &amp;ldquo;Hello World&amp;rdquo; console application.</description></item><item><title>make-exp</title><link>/2018/12/jrbeverly-make-exp/</link><pubDate>Wed, 12 Dec 2018 22:46:15 +0000</pubDate><guid>/2018/12/jrbeverly-make-exp/</guid><description>Experimenting with using makefiles as a build harness type structure. The idea is to package &lt;code>makefile&lt;/code> using GitHub, that can then be downloaded when running.</description></item><item><title>infrastructure-labs</title><link>/2018/11/jrbeverly-infrastructure-labs/</link><pubDate>Fri, 02 Nov 2018 23:41:32 +0000</pubDate><guid>/2018/11/jrbeverly-infrastructure-labs/</guid><description>The specification of &lt;code>jrbeverlylabs&lt;/code> as a set of terraform modules.</description></item><item><title>xunit-metadata</title><link>/2018/11/jrbeverly-xunit-metadata/</link><pubDate>Fri, 02 Nov 2018 00:52:39 +0000</pubDate><guid>/2018/11/jrbeverly-xunit-metadata/</guid><description>Strongly-typed attributes for the management and organization of tests. As opposed to using strings throughout the code, &lt;code>[Trait(&amp;quot;Category&amp;quot;, &amp;quot;Unit&amp;quot;)]&lt;/code>, you can use strongly-typed attributes for organizing tests.</description></item><item><title>wifi-web</title><link>/2018/11/jrbeverly-wifi-web/</link><pubDate>Fri, 02 Nov 2018 00:52:35 +0000</pubDate><guid>/2018/11/jrbeverly-wifi-web/</guid><description>Wifi Web provides an autorun USB for connecting to wireless access points for devices that do not have access to a camera. It opens an HTML page that provides easy access to the Wifi connection details. If you have a camera-enabled device, you can scan Wifi connection details using a QR Code (or any barcode type).</description></item><item><title>stack-opengl</title><link>/2018/11/jrbeverly-stack-opengl/</link><pubDate>Fri, 02 Nov 2018 00:52:30 +0000</pubDate><guid>/2018/11/jrbeverly-stack-opengl/</guid><description>stack-opengl is a variant of &lt;code>stack-net&lt;/code> written in OpenGL. It uses extremely simple shaders and OpenGL programming to create a block stacking application.</description></item><item><title>stack-net</title><link>/2018/11/jrbeverly-stack-net/</link><pubDate>Fri, 02 Nov 2018 00:52:29 +0000</pubDate><guid>/2018/11/jrbeverly-stack-net/</guid><description>A block blueprinter, built using a visual graph style approach to graphics. Stack-NET Summary A block blueprinter, built using a visual graph style approach to graphics.
Getting Started The project is based on the old approach to C# projects. The project should be opened in Visual Studio, built, then run.
Acknowledgements The project icon is retrieved from the Noun Project. The original source material has been altered for the purposes of the project.</description></item><item><title>raytracer</title><link>/2018/11/jrbeverly-raytracer/</link><pubDate>Fri, 02 Nov 2018 00:52:27 +0000</pubDate><guid>/2018/11/jrbeverly-raytracer/</guid><description>A Raytracer that receives a scene defined in lua, and produces an image output. RayTracer Summary A Raytracer that receives a scene defined in lua, and produces an image output.
Getting Started Compilation follows the standard process defined by the UWaterloo CS488 sample projects.
We use premake4 as our cross-platform build system. First you will need to build all the static libraries that the projects depend on.</description></item><item><title>profile</title><link>/2018/11/jrbeverly-profile/</link><pubDate>Fri, 02 Nov 2018 00:52:26 +0000</pubDate><guid>/2018/11/jrbeverly-profile/</guid><description>This is a one page user profile for Jonathan Beverly (jrbeverly - i.e. me), linking to multiple online identities, relevant external sites, and popular social networking websites. Not all of them are included, but most of the relevant ones are.</description></item><item><title>exp-portfolio</title><link>/2018/11/jrbeverly-exp-portfolio/</link><pubDate>Fri, 02 Nov 2018 00:52:25 +0000</pubDate><guid>/2018/11/jrbeverly-exp-portfolio/</guid><description>Collections data from a specified list of gitlab projects, then converts them into static HTML briefs. jrbeverly portfolio Summary Collections data from a specified list of gitlab projects, then converts them into static HTML briefs.
Getting Started The project is designed to git clone a series of repository, then collect information from each of them. This includes the project icon, name, license, path, etc.</description></item><item><title>office-depot</title><link>/2018/11/jrbeverly-office-depot/</link><pubDate>Fri, 02 Nov 2018 00:52:22 +0000</pubDate><guid>/2018/11/jrbeverly-office-depot/</guid><description>office-depot is a container based software development stack. office-depot Summary office-depot is a container based software development stack.
Getting Started Getting started is as simple as using docker-compose. You can do so as such:
docker-compose up --env-file=office-depot.env -d Updating and Upgrading If you wish to upgrade the container stack, you need to run the following commands:
docker-compose stop docker-compose rm -v docker-compose pull You can then start the docker environment.</description></item><item><title>mirroring</title><link>/2018/11/jrbeverly-mirroring/</link><pubDate>Fri, 02 Nov 2018 00:52:21 +0000</pubDate><guid>/2018/11/jrbeverly-mirroring/</guid><description>A lightweight bash script that allows easy mirroring of projects to external git hosts. Mirroring Summary A lightweight bash script that allows easy mirroring of projects to external git hosts.
Getting started Simply fork this repository, as it has all the scripts necessary for performing mirrors. You can then add your repositories into the assets/ directory. You will want to store them as such:</description></item><item><title>localization-net</title><link>/2018/11/jrbeverly-localization-net/</link><pubDate>Fri, 02 Nov 2018 00:52:18 +0000</pubDate><guid>/2018/11/jrbeverly-localization-net/</guid><description>A simple experiment prototyping a concept for strongly typed language terms. &lt;strong>Note: The generated component is not built with this. This is a usage prototype only (no generator is included).&lt;/strong></description></item><item><title>issues-style</title><link>/2018/11/jrbeverly-issues-style/</link><pubDate>Fri, 02 Nov 2018 00:52:13 +0000</pubDate><guid>/2018/11/jrbeverly-issues-style/</guid><description>A style guide for issue management, release versioning, Git Flow and repository documentation.</description></item><item><title>project-icons</title><link>/2018/11/jrbeverly-project-icons/</link><pubDate>Fri, 02 Nov 2018 00:52:12 +0000</pubDate><guid>/2018/11/jrbeverly-project-icons/</guid><description>A collection of scalable vector graphics (SVG) that define project and group icons.</description></item><item><title>gitlab-ci-yml</title><link>/2018/11/jrbeverly-gitlab-ci-yml/</link><pubDate>Fri, 02 Nov 2018 00:52:10 +0000</pubDate><guid>/2018/11/jrbeverly-gitlab-ci-yml/</guid><description>A collection of GitLab CI configuration files that are used by my projects. Stored here as the process of docker projects are polished and standardized.</description></item><item><title>entity-net</title><link>/2018/11/jrbeverly-entity-net/</link><pubDate>Fri, 02 Nov 2018 00:52:07 +0000</pubDate><guid>/2018/11/jrbeverly-entity-net/</guid><description>A simple experiment prototyping a concept for strongly typed ORMs.</description></item><item><title>distributedrpc</title><link>/2018/11/jrbeverly-distributedrpc/</link><pubDate>Fri, 02 Nov 2018 00:41:09 +0000</pubDate><guid>/2018/11/jrbeverly-distributedrpc/</guid><description>A multi-client, multi-server environment that relies on a binder to facilitate an RPC system.</description></item><item><title>contentbundler</title><link>/2018/11/jrbeverly-contentbundler/</link><pubDate>Fri, 02 Nov 2018 00:41:04 +0000</pubDate><guid>/2018/11/jrbeverly-contentbundler/</guid><description>A proof of concept for generation of strongly typed paths using the Roslyn Framework. ContentBundler Summary A proof of concept for generation of strongly typed paths using the Roslyn Framework.
Getting Started ContentBundler is provided as an command line application, originally adapted from an XNA Content Compiler. The new version greatly simplifies the code requirements, leveraging Roslyn for the code generation. An example is available from test/assets, which will generate the result [PatchQ.</description></item><item><title>udacicards</title><link>/2018/04/jrbeverly-udacicards/</link><pubDate>Sat, 07 Apr 2018 20:55:53 +0000</pubDate><guid>/2018/04/jrbeverly-udacicards/</guid><description>For the UdaciCards project, you will build a mobile application (Android or iOS - or both) that allows users to study collections of flashcards. The app will allow users to create different categories of flashcards called &amp;ldquo;decks&amp;rdquo;, add flashcards to those decks, then take quizzes on those decks.</description></item><item><title>jollybot</title><link>/2018/04/jrbeverly-jollybot/</link><pubDate>Sat, 07 Apr 2018 20:50:44 +0000</pubDate><guid>/2018/04/jrbeverly-jollybot/</guid><description>A Prisoners' Dilemma A.I. bot performing an &amp;lsquo;Olive Branch&amp;rsquo; strategy focusing on attempting to cooperate whenever possible. JollyBot Summary Prisoners' Dilemma A.I. bot performing an &amp;lsquo;Olive Branch&amp;rsquo; strategy focusing on attempting to cooperate whenever possible. The bot attempts to establish cooperation, even in cases where the opposing agent may appear hostile (e.g. always defect).
Description The iterated prisoner’s dilemma is a classic two-person game which consists of a number of rounds.</description></item><item><title>readable</title><link>/2018/01/jrbeverly-readable/</link><pubDate>Wed, 17 Jan 2018 23:40:48 +0000</pubDate><guid>/2018/01/jrbeverly-readable/</guid><description>Udacity Nanodegree React Project</description></item><item><title>myreads</title><link>/2017/11/jrbeverly-myreads/</link><pubDate>Sat, 18 Nov 2017 22:49:02 +0000</pubDate><guid>/2017/11/jrbeverly-myreads/</guid><description>A digital bookshelf app that allows you to select and categorize books you have read, are currently reading, or want to read.</description></item><item><title>githooks</title><link>/2017/09/jrbeverly-githooks/</link><pubDate>Sat, 16 Sep 2017 01:04:05 +0000</pubDate><guid>/2017/09/jrbeverly-githooks/</guid><description>GitHooks provides a multi-hook framework for Git Hooks, along with a collection of scripts for the purposes of encouraging a commit policy, altering the project environment depending on the state of the repository, and implementing continuous integration workflows. The framework allows multi-script execution, you can use GitHooks to automate or optimize virtually any aspect of your development workflow.</description></item><item><title>homelab</title><link>/2017/05/jrbeverly-homelab/</link><pubDate>Wed, 31 May 2017 22:54:15 +0000</pubDate><guid>/2017/05/jrbeverly-homelab/</guid><description>A collection of templates and utility scripts used in my homelab. Homelab Summary A collection of templates and utility scripts used in my homelab. Most of these are just snippets or experiments.
Getting Started As most of the scripts are self-contained, you can clone the repository:
git clone git://homelab/homelab And copy the relevant scripts into /usr/bin/ (or others) as necessary. You can also skip that, and just copy the contents of a file, then paste it into a fresh nano instance.</description></item><item><title>jotto</title><link>/2017/05/jrbeverly-jotto/</link><pubDate>Wed, 31 May 2017 14:21:28 +0000</pubDate><guid>/2017/05/jrbeverly-jotto/</guid><description>Jotto is a logic-oriented word game played with two players. Each player picks a secret word of five letters (that is in the dictionary), and the object of the game is to correctly guess the other player&amp;rsquo;s word first. Players take turns guessing and giving the number of Jots, or the number of letters that are in both the guessed word and the secret word. The Jotto application is built with a single player, playing against a computer. The objective of the game is to correctly guess the secret word before the maximum number of guesses. The user interface provides feedback about the success of each guess, and the progress being made by the player. Each guess must be validated that it is present in the dictionary, of the proper length and contains repeated characters. After each guess the player will be provided feedback about the guess, such as the number of exact character matches and the number of partial character matches.</description></item></channel></rss>