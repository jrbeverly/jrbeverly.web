<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>org:infraprints on jrbeverly</title><link>/tags/orginfraprints/</link><description>Recent content in org:infraprints on jrbeverly</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 04 Nov 2019 00:24:25 +0000</lastBuildDate><atom:link href="/tags/orginfraprints/index.xml" rel="self" type="application/rss+xml"/><item><title>terraform-aws-iam-ci-role</title><link>/2019/11/infraprints-terraform-aws-iam-ci-role/</link><pubDate>Mon, 04 Nov 2019 00:24:25 +0000</pubDate><guid>/2019/11/infraprints-terraform-aws-iam-ci-role/</guid><description>AWS IAM External Role Terraform module for a continuous integration user-role pairing.
These types of resources are supported:
IAM Role Usage module &amp;#34;cicd_setup&amp;#34; { source = &amp;#34;git::https://gitlab.com/infraprints/modules/aws/iam-ci-role&amp;#34; username = &amp;#34;infraprints-iam-ci-role-basic&amp;#34; role_name = &amp;#34;infraprints-iam-ci-role-basic&amp;#34; environment_variable = { s3_bucket = &amp;#34;infraprints-bucket-example&amp;#34; hello_world = &amp;#34;hello world&amp;#34; } } Examples Basic Example Notes Environment variables are prefixed with ENV_ to prevent them Inputs Name Description Type Default Required environment_variable Times map &amp;lt;map&amp;gt; no labels map &amp;lt;map&amp;gt; no length The length of the external id desired.</description></item><item><title>terraform-aws-terraform-state-output</title><link>/2019/11/infraprints-terraform-aws-terraform-state-output/</link><pubDate>Mon, 04 Nov 2019 00:23:12 +0000</pubDate><guid>/2019/11/infraprints-terraform-aws-terraform-state-output/</guid><description>AWS S3 Terraform State Output Terraform module which creates an S3 Object containing terraform outputs.
These types of resources are supported:
S3 Bucket Object Template Usage locals { topics = [&amp;#34;aws&amp;#34;, &amp;#34;s3&amp;#34;, &amp;#34;terraform&amp;#34;] tags = { name = &amp;#34;infraprints&amp;#34;, description = &amp;#34;Infrastructure as Code.&amp;#34; } } module &amp;#34;output_resources&amp;#34; { source = &amp;#34;git::https://gitlab.com/infraprints/modules/aws/terraform-state-output&amp;#34; bucket = &amp;#34;infraprints-terraform-state-output&amp;#34; key = &amp;#34;aws/infraprints/project/outputs.tf&amp;#34; terraform_output = [ { key = &amp;#34;aws_account_id&amp;#34; value = &amp;#34;123412341234&amp;#34; }, { key = &amp;#34;topics&amp;#34; value = jsonencode(local.</description></item><item><title>terraform-aws-route53-subdomains</title><link>/2019/11/infraprints-terraform-aws-route53-subdomains/</link><pubDate>Mon, 04 Nov 2019 00:21:10 +0000</pubDate><guid>/2019/11/infraprints-terraform-aws-route53-subdomains/</guid><description>terraform-aws-acm-certificate</description></item><item><title>terraform-aws-terraform-remote-state</title><link>/2019/11/infraprints-terraform-aws-terraform-remote-state/</link><pubDate>Mon, 04 Nov 2019 00:20:48 +0000</pubDate><guid>/2019/11/infraprints-terraform-aws-terraform-remote-state/</guid><description>AWS Terraform Remote State with Lock Table Terraform module which creates a terraform remote state storage in S3 with a DynamoDB lock table.
These types of resources are supported:
S3 Bucket DynamoDB Table Usage module &amp;#34;remote_state&amp;#34; { source = &amp;#34;git::https://gitlab.com/infraprints/modules/aws/terraform-remote-state&amp;#34; bucket = &amp;#34;infraprints-terraform-remote-state&amp;#34; table = &amp;#34;infraprints-terraform-lock-table&amp;#34; } resource &amp;#34;aws_iam_role&amp;#34; &amp;#34;terraform&amp;#34; { name = &amp;#34;infraprints-terraform&amp;#34; assume_role_policy = &amp;lt;&amp;lt;EOF { &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [ { &amp;#34;Action&amp;#34;: &amp;#34;sts:AssumeRole&amp;#34;, &amp;#34;Principal&amp;#34;: { &amp;#34;Service&amp;#34;: &amp;#34;ec2.</description></item><item><title>terraform-aws-s3-artifacts</title><link>/2019/11/infraprints-terraform-aws-s3-artifacts/</link><pubDate>Mon, 04 Nov 2019 00:18:24 +0000</pubDate><guid>/2019/11/infraprints-terraform-aws-s3-artifacts/</guid><description>AWS S3 Terraform State Output Terraform module for an tiered storage S3 bucket with eventual object expiration. Primary use key is for a build artifacts storage.
These types of resources are supported:
S3 Bucket Usage module &amp;#34;build_artifacts&amp;#34; { source = &amp;#34;git::https://gitlab.com/infraprints/modules/aws/s3-artifacts&amp;#34; bucket = &amp;#34;infraprints-s3-artifacts&amp;#34; standard_transition_days = 10 glacier_transition_days = 30 expiration_days = 365 tags = { Longevity = &amp;#34;Yearly&amp;#34; Expiration = &amp;#34;True&amp;#34; } } Examples Basic Example Adjusted Example Notes With the default configuration, all objects in the S3 bucket will expire in 90 days.</description></item><item><title>terraform-aws-codepipeline-terraform</title><link>/2019/11/infraprints-terraform-aws-codepipeline-terraform/</link><pubDate>Mon, 04 Nov 2019 00:15:50 +0000</pubDate><guid>/2019/11/infraprints-terraform-aws-codepipeline-terraform/</guid><description>terraform-aws-acm-certificate</description></item><item><title>terraform-aws-acm-certificate</title><link>/2019/11/infraprints-terraform-aws-acm-certificate/</link><pubDate>Mon, 04 Nov 2019 00:14:04 +0000</pubDate><guid>/2019/11/infraprints-terraform-aws-acm-certificate/</guid><description>AWS ACM DNS Validated Certificate Terraform module for provisioning a DNS validated certificate, along with the required validation records. The module will wait for validation to complete.
These types of resources are supported:
ACM Certificate ACM Certificate Validation Usage module &amp;#34;certificate&amp;#34; { source = &amp;#34;git::https://gitlab.com/infraprints/modules/aws/acm-certificate&amp;#34; zone_id = &amp;#34;${data.aws_route53_zone.zone.id}&amp;#34; domain_name = &amp;#34;infraprints.io&amp;#34; subject_alternative_names = [ &amp;#34;api.infraprints.io&amp;#34;, &amp;#34;dev.infraprints.io&amp;#34;, ] } data &amp;#34;aws_route53_zone&amp;#34; &amp;#34;zone&amp;#34; { name = &amp;#34;infraprints.io&amp;#34; } Examples Basic Example Multiple Records Example Notes The module deploys the required validation records and wait for validation to complete, which can take upwards to 30 minutes.</description></item><item><title>terraform-aws-iam-external-role</title><link>/2019/11/infraprints-terraform-aws-iam-external-role/</link><pubDate>Mon, 04 Nov 2019 00:11:46 +0000</pubDate><guid>/2019/11/infraprints-terraform-aws-iam-external-role/</guid><description>AWS IAM External Role Terraform module for describing an IAM role responsible for delegating cross-account access.
These types of resources are supported:
IAM Role Usage module &amp;#34;example&amp;#34; { source = &amp;#34;git::https://gitlab.com/infraprints/modules/aws/iam-external-role&amp;#34; name = &amp;#34;infraprints-iam-external-role&amp;#34; external_id = &amp;#34;TXAiS9rfgQghzWW2&amp;#34; role_arn = [&amp;#34;${aws_iam_role.default.arn}&amp;#34;] count = &amp;#34;1&amp;#34; } resource &amp;#34;aws_iam_role&amp;#34; &amp;#34;default&amp;#34; { name = &amp;#34;infraprints-ec2-role&amp;#34; assume_role_policy = &amp;lt;&amp;lt;EOF { &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [ { &amp;#34;Action&amp;#34;: &amp;#34;sts:AssumeRole&amp;#34;, &amp;#34;Principal&amp;#34;: { &amp;#34;Service&amp;#34;: &amp;#34;ec2.amazonaws.com&amp;#34; }, &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, } ] } EOF } Examples Basic Example ExternalID Example Multiple roles Example Notes The count property is required as a constant as a workaround to a Terraform issue.</description></item><item><title>readme</title><link>/2019/11/infraprints-readme/</link><pubDate>Mon, 04 Nov 2019 00:10:23 +0000</pubDate><guid>/2019/11/infraprints-readme/</guid><description/></item><item><title>terraform-id</title><link>/2019/11/infraprints-terraform-id/</link><pubDate>Mon, 04 Nov 2019 00:07:59 +0000</pubDate><guid>/2019/11/infraprints-terraform-id/</guid><description>Terraform Resource ID Construct a formatted name for a Terraform resource.</description></item><item><title>terraform-gitlab-netlify-cicd</title><link>/2019/11/infraprints-terraform-gitlab-netlify-cicd/</link><pubDate>Mon, 04 Nov 2019 00:00:28 +0000</pubDate><guid>/2019/11/infraprints-terraform-gitlab-netlify-cicd/</guid><description>Terraform Netlify Gitlab CI/CD Terraform module which creates a site on Netlify with the necessary variables for GitLab CI deployments.
These types of resources are supported:
Netlify Site Usage module &amp;#34;cloudability&amp;#34; { source = &amp;#34;git::https://gitlab.com/infraprints/modules/netlify/gitlab-cicd.git?ref=master&amp;#34; name = &amp;#34;my-netlify-website&amp;#34; custom_domain = &amp;#34;www.example.com&amp;#34; project = &amp;#34;01234567&amp;#34; } Examples Basic Example Notes Three GitLab CI Environment Variables (NETLIFY_SITE_ID, NETLIFY_NAME, NETLIFY_CUSTOM_DOMAIN) Inputs Name Description Type Default Required name A friendly name for the netlify site.</description></item><item><title>website</title><link>/2019/11/infraprints-website/</link><pubDate>Sun, 03 Nov 2019 17:48:38 +0000</pubDate><guid>/2019/11/infraprints-website/</guid><description>Website The work-in-progress stub for the infraprints website.</description></item><item><title>simple-terraform</title><link>/2019/01/infraprints-simple-terraform/</link><pubDate>Fri, 18 Jan 2019 00:04:09 +0000</pubDate><guid>/2019/01/infraprints-simple-terraform/</guid><description>Prototype CodePipeline Terraform Repository A repository for terraform execution in a Codepipeline task. This repository is part of an original experiment
I wanted to have an terraform executor that met the following requirements:
Use official terraform docker image (hashicorp/terraform:light) No external dependencies or custom images (e.g. terragrunt, astro, etc) Customizable execution process with minimal overhead Support in-repository modules No credential management (AWS Codepipeline execution) Multiple AWS environments within a single repository No single state file, state file per component (controlled by terraform.</description></item></channel></rss>